{"ast":null,"code":"var incrementString=function incrementString(string){// Convert pass args to string\nvar str=string.toString();// Extract string's number\nvar number=str.match(/\\d+/)===null?0:str.match(/\\d+/)[0];// Store number's length\nvar numberLength=number.length;// Increment number by 1\nnumber=(parseInt(number)+1).toString();// If there were leading 0s, add them again\nwhile(number.length<numberLength){number='0'+number;}return str.replace(/[0-9]/g,'').concat(number);};export default incrementString;","map":{"version":3,"names":["incrementString","string","str","toString","number","match","numberLength","length","parseInt","replace","concat"],"sources":["C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/src/helpers/incrementString.js"],"sourcesContent":["const incrementString = (string) => {\r\n  // Convert pass args to string\r\n  const str = string.toString();\r\n  // Extract string's number\r\n  let number = str.match(/\\d+/) === null ? 0 : str.match(/\\d+/)[0];\r\n\r\n  // Store number's length\r\n  const numberLength = number.length;\r\n\r\n  // Increment number by 1\r\n  number = (parseInt(number) + 1).toString();\r\n\r\n  // If there were leading 0s, add them again\r\n  while (number.length < numberLength) {\r\n    number = '0' + number;\r\n  }\r\n\r\n  return str.replace(/[0-9]/g, '').concat(number);\r\n};\r\n\r\nexport default incrementString;\r\n"],"mappings":"AAAA,GAAM,CAAAA,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAIC,MAAM,CAAK,CAClC;AACA,GAAM,CAAAC,GAAG,CAAGD,MAAM,CAACE,QAAQ,EAAE,CAC7B;AACA,GAAI,CAAAC,MAAM,CAAGF,GAAG,CAACG,KAAK,CAAC,KAAK,CAAC,GAAK,IAAI,CAAG,CAAC,CAAGH,GAAG,CAACG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAEhE;AACA,GAAM,CAAAC,YAAY,CAAGF,MAAM,CAACG,MAAM,CAElC;AACAH,MAAM,CAAG,CAACI,QAAQ,CAACJ,MAAM,CAAC,CAAG,CAAC,EAAED,QAAQ,EAAE,CAE1C;AACA,MAAOC,MAAM,CAACG,MAAM,CAAGD,YAAY,CAAE,CACnCF,MAAM,CAAG,GAAG,CAAGA,MAAM,CACvB,CAEA,MAAO,CAAAF,GAAG,CAACO,OAAO,CAAC,QAAQ,CAAE,EAAE,CAAC,CAACC,MAAM,CAACN,MAAM,CAAC,CACjD,CAAC,CAED,cAAe,CAAAJ,eAAe"},"metadata":{},"sourceType":"module"}