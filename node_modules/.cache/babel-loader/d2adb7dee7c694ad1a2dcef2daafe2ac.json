{"ast":null,"code":"import { parseDataUrlContent } from './util';\nvar cache = {};\nfunction getCacheKey(url) {\n  var key = url.replace(/\\?.*/, '');\n  // font resourse\n  if (/ttf|otf|eot|woff2?/i.test(key)) {\n    key = key.replace(/.*\\//, '');\n  }\n  return key;\n}\nexport function getBlobFromURL(url, options) {\n  var cacheKey = getCacheKey(url);\n  if (cache[cacheKey] != null) {\n    return cache[cacheKey];\n  }\n  // cache bypass so we dont have CORS issues with cached images\n  // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n  if (options.cacheBust) {\n    // eslint-disable-next-line no-param-reassign\n    url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n  }\n  var failed = function failed(reason) {\n    var placeholder = '';\n    if (options.imagePlaceholder) {\n      var parts = options.imagePlaceholder.split(/,/);\n      if (parts && parts[1]) {\n        placeholder = parts[1];\n      }\n    }\n    var msg = \"Failed to fetch resource: \".concat(url);\n    if (reason) {\n      msg = typeof reason === 'string' ? reason : reason.message;\n    }\n    if (msg) {\n      console.error(msg);\n    }\n    return {\n      blob: placeholder,\n      contentType: ''\n    };\n  };\n  var deferred = window.fetch(url).then(function (res) {\n    return (\n      // eslint-disable-next-line promise/no-nesting\n      res.blob().then(function (blob) {\n        return {\n          blob: blob,\n          contentType: res.headers.get('Content-Type') || ''\n        };\n      })\n    );\n  }).then(function (_ref) {\n    var blob = _ref.blob,\n      contentType = _ref.contentType;\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        return resolve({\n          contentType: contentType,\n          blob: reader.result\n        });\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }).then(function (_ref2) {\n    var blob = _ref2.blob,\n      contentType = _ref2.contentType;\n    return {\n      contentType: contentType,\n      blob: parseDataUrlContent(blob)\n    };\n  })\n  // on failed\n  .catch(failed);\n  // cache result\n  cache[cacheKey] = deferred;\n  return deferred;\n}","map":{"version":3,"mappings":"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","names":["parseDataUrlContent","cache","getCacheKey","url","key","replace","test","getBlobFromURL","options","cacheKey","cacheBust","Date","getTime","failed","reason","placeholder","imagePlaceholder","parts","split","msg","message","console","error","blob","contentType","deferred","window","fetch","then","res","headers","get","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","catch"],"sources":["../src/getBlobFromURL.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}