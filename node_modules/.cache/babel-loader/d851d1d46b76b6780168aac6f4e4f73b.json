{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/regenerator/index.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nvar StaleWhileRevalidate = /*#__PURE__*/function (_Strategy) {\n  _inherits(StaleWhileRevalidate, _Strategy);\n  var _super = _createSuper(StaleWhileRevalidate);\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * {@link workbox-core.cacheNames}.\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n   * `fetch()` requests made by this strategy.\n   * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  function StaleWhileRevalidate() {\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, StaleWhileRevalidate);\n    _this = _super.call(this, options);\n    // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n    // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n    if (!_this.plugins.some(function (p) {\n      return 'cacheWillUpdate' in p;\n    })) {\n      _this.plugins.unshift(cacheOkAndOpaquePlugin);\n    }\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n  _createClass(StaleWhileRevalidate, [{\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request, handler) {\n        var logs, fetchAndCachePromise, response, error, _iterator, _step, log;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logs = [];\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'handle',\n                    paramName: 'request'\n                  });\n                }\n                fetchAndCachePromise = handler.fetchAndCachePut(request).catch(function () {\n                  // Swallow this error because a 'no-response' error will be thrown in\n                  // main handler return flow. This will be in the `waitUntil()` flow.\n                });\n                void handler.waitUntil(fetchAndCachePromise);\n                _context.next = 6;\n                return handler.cacheMatch(request);\n              case 6:\n                response = _context.sent;\n                if (!response) {\n                  _context.next = 11;\n                  break;\n                }\n                if (process.env.NODE_ENV !== 'production') {\n                  logs.push(\"Found a cached response in the '\".concat(this.cacheName, \"'\") + \" cache. Will update with the network response in the background.\");\n                }\n                _context.next = 21;\n                break;\n              case 11:\n                if (process.env.NODE_ENV !== 'production') {\n                  logs.push(\"No response found in the '\".concat(this.cacheName, \"' cache. \") + \"Will wait for the network response.\");\n                }\n                _context.prev = 12;\n                _context.next = 15;\n                return fetchAndCachePromise;\n              case 15:\n                response = _context.sent;\n                _context.next = 21;\n                break;\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](12);\n                if (_context.t0 instanceof Error) {\n                  error = _context.t0;\n                }\n              case 21:\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n                  _iterator = _createForOfIteratorHelper(logs);\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      log = _step.value;\n                      logger.log(log);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n                if (response) {\n                  _context.next = 24;\n                  break;\n                }\n                throw new WorkboxError('no-response', {\n                  url: request.url,\n                  error: error\n                });\n              case 24:\n                return _context.abrupt(\"return\", response);\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[12, 18]]);\n      }));\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n      return _handle;\n    }()\n  }]);\n  return StaleWhileRevalidate;\n}(Strategy);\nexport { StaleWhileRevalidate };","map":{"version":3,"names":["assert","logger","WorkboxError","cacheOkAndOpaquePlugin","Strategy","messages","StaleWhileRevalidate","_Strategy","_inherits","_super","_createSuper","_this","options","arguments","length","undefined","_classCallCheck","call","plugins","some","p","unshift","_createClass","key","value","_handle2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","handler","logs","fetchAndCachePromise","response","error","_iterator","_step","log","wrap","_callee$","_context","prev","next","process","env","NODE_ENV","isInstance","Request","moduleName","className","constructor","name","funcName","paramName","fetchAndCachePut","catch","waitUntil","cacheMatch","sent","push","concat","cacheName","t0","Error","groupCollapsed","strategyStart","_createForOfIteratorHelper","s","n","done","err","e","f","printFinalResponse","groupEnd","url","abrupt","stop","_handle","_x","_x2","apply"],"sources":["C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/workbox-strategies/StaleWhileRevalidate.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}