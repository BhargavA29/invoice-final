{"ast":null,"code":"import _slicedToArray from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/regenerator/index.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getBlobFromURL } from './getBlobFromURL';\nimport { getMimeType, isDataUrl, makeDataUrl, resolveUrl } from './util';\nvar URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nvar URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"'])([^\"']+)\\1\\)/g;\nvar FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nexport function toRegex(url) {\n  // eslint-disable-next-line no-useless-escape\n  var escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n  return new RegExp(\"(url\\\\(['\\\"]?)(\".concat(escaped, \")(['\\\"]?\\\\))\"), 'g');\n}\nexport function parseURLs(cssText) {\n  var result = [];\n  cssText.replace(URL_REGEX, function (raw, quotation, url) {\n    result.push(url);\n    return raw;\n  });\n  return result.filter(function (url) {\n    return !isDataUrl(url);\n  });\n}\nexport function embed(cssText, resourceURL, baseURL, options, get) {\n  var resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n  return Promise.resolve(resolvedURL).then(function (url) {\n    return get ? get(url) : getBlobFromURL(url, options);\n  }).then(function (data) {\n    if (typeof data === 'string') {\n      return makeDataUrl(data, getMimeType(resourceURL));\n    }\n    return makeDataUrl(data.blob, getMimeType(resourceURL) || data.contentType);\n  }).then(function (dataURL) {\n    return cssText.replace(toRegex(resourceURL), \"$1\".concat(dataURL, \"$3\"));\n  }).then(function (content) {\n    return content;\n  }, function () {\n    return resolvedURL;\n  });\n}\nfunction filterPreferredFontFormat(str, _ref) {\n  var preferredFontFormat = _ref.preferredFontFormat;\n  return !preferredFontFormat ? str : str.replace(FONT_SRC_REGEX, function (match) {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      var _ref2 = URL_WITH_FORMAT_REGEX.exec(match) || [],\n        _ref3 = _slicedToArray(_ref2, 3),\n        src = _ref3[0],\n        format = _ref3[2];\n      if (!format) {\n        return '';\n      }\n      if (format === preferredFontFormat) {\n        return \"src: \".concat(src, \";\");\n      }\n    }\n  });\n}\nexport function shouldEmbed(url) {\n  return url.search(URL_REGEX) !== -1;\n}\nexport function embedResources(cssText, baseUrl, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var filteredCSSText;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (shouldEmbed(cssText)) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\", Promise.resolve(cssText));\n          case 2:\n            filteredCSSText = filterPreferredFontFormat(cssText, options);\n            return _context.abrupt(\"return\", Promise.resolve(filteredCSSText).then(parseURLs).then(function (urls) {\n              return urls.reduce(function (deferred, url) {\n                return (\n                  // eslint-disable-next-line promise/no-nesting\n                  deferred.then(function (css) {\n                    return embed(css, url, baseUrl, options);\n                  })\n                );\n              }, Promise.resolve(filteredCSSText));\n            }));\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}","map":{"version":3,"mappings":"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","names":["getBlobFromURL","getMimeType","isDataUrl","makeDataUrl","resolveUrl","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","toRegex","url","escaped","replace","RegExp","parseURLs","cssText","result","raw","quotation","push","filter","embed","resourceURL","baseURL","options","get","resolvedURL","Promise","resolve","then","data","blob","contentType","dataURL","content","filterPreferredFontFormat","str","preferredFontFormat","match","exec","_ref3","src","format","shouldEmbed","search","embedResources","baseUrl","_context","filteredCSSText","urls","reduce","deferred","css"],"sources":["../src/embedResources.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}