{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/regenerator/index.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { toArray } from './util';\nimport { shouldEmbed, embedResources } from './embedResources';\nvar cssFetchCache = {};\nfunction fetchCSS(url) {\n  var cache = cssFetchCache[url];\n  if (cache != null) {\n    return cache;\n  }\n  var deferred = window.fetch(url).then(function (res) {\n    return {\n      url: url,\n      cssText: res.text()\n    };\n  });\n  cssFetchCache[url] = deferred;\n  return deferred;\n}\nfunction embedFonts(meta) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", meta.cssText.then(function (raw) {\n              var cssText = raw;\n              var regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g;\n              var fontLocs = cssText.match(/url\\([^)]+\\)/g) || [];\n              var loadFonts = fontLocs.map(function (location) {\n                var url = location.replace(regexUrl, '$1');\n                if (!url.startsWith('https://')) {\n                  url = new URL(url, meta.url).href;\n                }\n                // eslint-disable-next-line promise/no-nesting\n                return window.fetch(url).then(function (res) {\n                  return res.blob();\n                }).then(function (blob) {\n                  return new Promise(function (resolve, reject) {\n                    var reader = new FileReader();\n                    reader.onloadend = function () {\n                      // Side Effect\n                      cssText = cssText.replace(location, \"url(\".concat(reader.result, \")\"));\n                      resolve([location, reader.result]);\n                    };\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                  });\n                });\n              });\n              // eslint-disable-next-line promise/no-nesting\n              return Promise.all(loadFonts).then(function () {\n                return cssText;\n              });\n            }));\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nfunction parseCSS(source) {\n  if (source == null) {\n    return [];\n  }\n  var result = [];\n  var commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi;\n  // strip out comments\n  var cssText = source.replace(commentsRegex, '');\n  var keyframesRegex = new RegExp('((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})', 'gi');\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    var matches = keyframesRegex.exec(cssText);\n    if (matches === null) {\n      break;\n    }\n    result.push(matches[0]);\n  }\n  cssText = cssText.replace(keyframesRegex, '');\n  var importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi;\n  // to match css & media queries together\n  var combinedCSSRegex = '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' + '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})';\n  // unified regex\n  var unifiedRegex = new RegExp(combinedCSSRegex, 'gi');\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    var _matches = importRegex.exec(cssText);\n    if (_matches === null) {\n      _matches = unifiedRegex.exec(cssText);\n      if (_matches === null) {\n        break;\n      } else {\n        importRegex.lastIndex = unifiedRegex.lastIndex;\n      }\n    } else {\n      unifiedRegex.lastIndex = importRegex.lastIndex;\n    }\n    result.push(_matches[0]);\n  }\n  return result;\n}\nfunction getCSSRules(styleSheets) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var ret, deferreds;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            ret = [];\n            deferreds = []; // First loop inlines imports\n            styleSheets.forEach(function (sheet) {\n              if ('cssRules' in sheet) {\n                try {\n                  toArray(sheet.cssRules).forEach(function (item, index) {\n                    if (item.type === CSSRule.IMPORT_RULE) {\n                      var importIndex = index + 1;\n                      var url = item.href;\n                      var deferred = fetchCSS(url).then(function (metadata) {\n                        return metadata ? embedFonts(metadata) : '';\n                      }).then(function (cssText) {\n                        return parseCSS(cssText).forEach(function (rule) {\n                          try {\n                            sheet.insertRule(rule, rule.startsWith('@import') ? importIndex += 1 : sheet.cssRules.length);\n                          } catch (error) {\n                            console.error('Error inserting rule from remote css', {\n                              rule: rule,\n                              error: error\n                            });\n                          }\n                        });\n                      }).catch(function (e) {\n                        console.error('Error loading remote css', e.toString());\n                      });\n                      deferreds.push(deferred);\n                    }\n                  });\n                } catch (e) {\n                  var inline = styleSheets.find(function (a) {\n                    return a.href == null;\n                  }) || document.styleSheets[0];\n                  if (sheet.href != null) {\n                    deferreds.push(fetchCSS(sheet.href).then(function (metadata) {\n                      return metadata ? embedFonts(metadata) : '';\n                    }).then(function (cssText) {\n                      return parseCSS(cssText).forEach(function (rule) {\n                        inline.insertRule(rule, sheet.cssRules.length);\n                      });\n                    }).catch(function (err) {\n                      console.error('Error loading remote stylesheet', err.toString());\n                    }));\n                  }\n                  console.error('Error inlining remote css file', e.toString());\n                }\n              }\n            });\n            return _context2.abrupt(\"return\", Promise.all(deferreds).then(function () {\n              // Second loop parses rules\n              styleSheets.forEach(function (sheet) {\n                if ('cssRules' in sheet) {\n                  try {\n                    toArray(sheet.cssRules).forEach(function (item) {\n                      ret.push(item);\n                    });\n                  } catch (e) {\n                    console.error(\"Error while reading CSS rules from \".concat(sheet.href), e.toString());\n                  }\n                }\n              });\n              return ret;\n            }));\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\nfunction getWebFontRules(cssRules) {\n  return cssRules.filter(function (rule) {\n    return rule.type === CSSRule.FONT_FACE_RULE;\n  }).filter(function (rule) {\n    return shouldEmbed(rule.style.getPropertyValue('src'));\n  });\n}\nfunction parseWebFontRules(node) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n              if (node.ownerDocument == null) {\n                reject(new Error('Provided element is not within a Document'));\n              }\n              resolve(toArray(node.ownerDocument.styleSheets));\n            }).then(function (styleSheets) {\n              return getCSSRules(styleSheets);\n            }).then(getWebFontRules));\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\nexport function getWebFontCSS(node, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", parseWebFontRules(node).then(function (rules) {\n              return Promise.all(rules.map(function (rule) {\n                var baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;\n                return embedResources(rule.cssText, baseUrl, options);\n              }));\n            }).then(function (cssTexts) {\n              return cssTexts.join('\\n');\n            }));\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\nexport function embedWebFonts(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", (options.fontEmbedCSS != null ? Promise.resolve(options.fontEmbedCSS) : getWebFontCSS(clonedNode, options)).then(function (cssText) {\n              var styleNode = document.createElement('style');\n              var sytleContent = document.createTextNode(cssText);\n              styleNode.appendChild(sytleContent);\n              if (clonedNode.firstChild) {\n                clonedNode.insertBefore(styleNode, clonedNode.firstChild);\n              } else {\n                clonedNode.appendChild(styleNode);\n              }\n              return clonedNode;\n            }));\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n}","map":{"version":3,"mappings":"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","names":["toArray","shouldEmbed","embedResources","cssFetchCache","fetchCSS","url","cache","deferred","window","fetch","then","res","cssText","text","embedFonts","meta","raw","regexUrl","fontLocs","match","loadFonts","map","location","replace","startsWith","URL","href","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","all","parseCSS","source","commentsRegex","keyframesRegex","RegExp","matches","exec","push","importRegex","combinedCSSRegex","unifiedRegex","lastIndex","getCSSRules","styleSheets","ret","deferreds","forEach","sheet","cssRules","item","index","type","CSSRule","IMPORT_RULE","importIndex","metadata","rule","insertRule","length","error","console","catch","e","toString","inline","find","a","document","err","getWebFontRules","filter","FONT_FACE_RULE","style","getPropertyValue","parseWebFontRules","node","ownerDocument","Error","getWebFontCSS","options","rules","baseUrl","parentStyleSheet","cssTexts","join","embedWebFonts","clonedNode","fontEmbedCSS","styleNode","createElement","sytleContent","createTextNode","appendChild","firstChild","insertBefore"],"sources":["../src/embedWebFonts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}